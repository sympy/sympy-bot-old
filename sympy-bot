#! /usr/bin/env python

import json
from urllib2 import urlopen
import sys
from optparse import OptionParser
from tempfile import mkdtemp
import subprocess
import os
from os.path import expandvars
import urllib2
import base64
from urllib import urlencode
import time

from utils import (cmd, github_get_pull_request,
        github_authenticate, pastehtml_upload, reviews_sympy_org_upload,
        github_add_comment_to_pull_request, list_pull_requests, format_repo,
        get_interpreter_version_info)
from testrunner import run_tests

default_testcommand = "setup.py test"
default_interpreter = "python"

def main():
    parser = OptionParser(usage="""\
[options] [commands]

Commands:

  review NNN            Reviews the pull request NNN; You can specify more than
                        one number to review several pull requests in a series
  list                  Lists all open pull requests
  list-numbers          Lists only the numbers of open pull requests;
                        Suitable for piping into 'xargs -L 1 sympy-bot review'""")
    parser.add_option("-n", "--no-upload",
            action="store_false", dest="upload",
            default=True, help="Do not upload the results into the pull request")
    parser.add_option("-R", "--repository",
            action="store", type="str", dest="repository",
            default=None, help="Change the default 'sympy/sympy' repository to "
            "something else. This allows to use sympy-bot with other projects.")
    parser.add_option("-r", "--reference",
            action="store", type="str", dest="reference",
            default=None, help="Passes this to 'git clone <sympy repo>'")
    parser.add_option("-t", "--testcommand", dest="testcommand",
            default=None, help="Command to run tests with. "
            "Use this to run only a subset of tests, rather than the full "
            "test suite. The default is 'sympy-bot -t 'setup.py test'.")
    parser.add_option("-i", "--interpreter", dest="interpreter",
            default=None, help="Select interpreter to run test with. If "
            "you select Python 3.x, source code will be automatically "
            "translated using 'bin/use2to3'. The default is 'python'.")
    parser.add_option("-3", "--python3",
            action="store_true", default=False, dest="python3",
            help="Shorthand for 'sympy-bot -i python3")
    parser.add_option("-s", "--server",
            action="store", type="str", dest="server",
            default="http://reviews.sympy.org",
            help="Server to upload results. Default is "
            "'http://reviews.sympy.org'")
    parser.add_option("-m", "--master-commit",
            action="store", type="str", dest="master_commit",
            default="origin/master", help="Commit to use as master for merging."  "Use 'origin/master' to use the current master (the default) "
            "and 'HEAD' to not merge.")

    options, args = parser.parse_args()
    config = load_config_file()

    if options.repository is None:
        options.repository = config.get("repository", "sympy/sympy")
    if options.reference is None:
        options.reference = config.get("reference")
    if options.testcommand is None:
        options.testcommand = config.get("testcommand", default_testcommand)
    if options.interpreter is None:
        options.interpreter = config.get("interpreter", default_interpreter)

    if options.python3:
        options.interpreter = "python3"

    options.user = config.get("user")
    options.token = config.get("token")

    if len(args) == 1:
        arg, = args
        if arg == "list":
            list_pull_requests(options.repository)
            return
        elif arg == "list-numbers":
            list_pull_requests(options.repository, numbers_only=True)
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) >= 2:
        arg1 = args[0]
        if arg1 == "review":
            nums = [int(x) for x in args[1:]]
            if options.upload:
                username, password = github_authenticate(options)
            else:
                username = password = None
            try:
                for n in nums:
                    review(n, options, username, password)
            except KeyboardInterrupt:
                print "\n> Quitting on signal SIGINT."
                sys.exit(1)
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) == 0:
        pass
    else:
        print "Too many arguments"
        sys.exit(1)
    parser.print_help()

def formulate_review(report_url, report_status, xpassed, master_hash,
        branch_hash, user, config):
    user = user.get("login", None)

    if user:
        atuser = "@"+user+": "
    else:
        atuser = ""
    if report_status == "conflicts":
        summary = """There were merge conflicts; could not test the branch.

%sPlease rebase or merge your branch with master.  \
See the report for a list of the merge conflicts.""" % atuser
    elif report_status == "fetch":
        summary = """Could not fetch the branch.

%sPlease run the sympy-bot tests again.""" % atuser
    elif report_status == "Failed":
        summary = """There were test failures.

%sPlease fix the test failures.""" % atuser
    elif report_status == "Passed":
        summary = """All tests have passed."""
    else:
        raise ValueError("Unknown report_status")

    details  = get_platform_version(config.interpreter)
    if config.testcommand != default_testcommand:
        bold = "**"
    else:
        bold = ""
    details += """*Test command:* %s%s%s\n""" % (bold, config.testcommand, bold)
    details += """*master hash*: %s\n""" % master_hash
    details += """*branch hash*: %s\n""" % branch_hash

    report = """\
**SymPy Bot Summary:** %s

Test results html report: %s

%s
Automatic review by [SymPy Bot](https://github.com/sympy/sympy-bot).""" % \
    (summary, report_url, details,)

    return report

def load_config_file():
    conf_file = os.path.expanduser('~/.sympy/sympy-bot.conf')

    if os.path.exists(conf_file):
        namespace = {}

        with open(conf_file) as f:
            try:
                exec f.read() in namespace
            except (SystemExit, KeyboardInterrupt):
                raise
            except:
                print "WARNING: The config file cannot be parsed."
                pass
            else:
                print "> Using %s" % conf_file
                return namespace

    return {}

def get_platform_version(interpreter):
    import sys
    from os import getenv
    import platform
    size = getattr(sys, "maxint", None)
    if size is None: #Python 3 doesn't have maxint
        size = sys.maxsize
    if size > 2**32:
        architecture = "64-bit"
    else:
        architecture = "32-bit"
    platfotm_system = platform.system()
    use_cache = getenv('SYMPY_USE_CACHE', 'yes').lower()
    executable = sys.executable
    python_version = get_interpreter_version_info(interpreter)
    r  = "*Interpreter:*   %s  (%s)\n" % (executable, python_version)
    r += "*Architecture:* %s (%s)\n" % (platfotm_system, architecture)
    r += "*Cache:*        %s\n" % use_cache
    return r


def review(n, config, username=None, password=None):
    tmpdir = mkdtemp(prefix='sympy-bot-tmp')
    print "> Working directory: %s" % tmpdir
    pull = github_get_pull_request(config.repository, n)
    assert pull['number'] == n
    print "> Reviewing pull request #%d" % n
    repo = pull['head']['repository']['url']
    branch = pull['head']['ref']
    user = pull["user"]
    author = '"%s" <%s>' % (pull["user"].get("name", "unknown"),
                            pull["user"].get("email", ""))
    print "> Pull request info:"
    print ">     Author: %s" % author
    print ">     Repository: %s" % repo
    print ">     Branch: %s" % branch

    print format_repo("> Cloning {repo} master", config.repository)

    if config.reference:
        reference = os.path.abspath(os.path.expanduser(os.path.expandvars(config.reference)))
        cmd(format_repo("cd %s; git clone --reference %s git://github.com/{repo}.git", config.repository) % (tmpdir, reference))
    else:
        cmd(format_repo("cd %s; git clone git://github.com/{repo}.git",
            config.repository) % tmpdir)

    print "> Testing..."
    result = run_tests(format_repo("https://github.com/{repo}.git",
        config.repository),
            repo, branch, tmpdir + "/sympy", config.testcommand,
            config.interpreter, config.python3, config.master_commit)
    if result["result"] == "error":
        print "There was an error. Report not uploaded."
        sys.exit(1)
    print "Done."
    print
    log_file = "%s/out/log" % tmpdir
    print "View log at: %s" % log_file
    log = result["log"]
    report_status = result["result"]
    xpassed = result["xpassed"]
    bot_file = os.path.realpath(os.path.abspath(__file__))
    bot_dir = os.path.dirname(bot_file)

    master_hash = result["master_hash"]
    branch_hash = result["branch_hash"]

    cmd("mkdir -p %s/out" % tmpdir)
    open(log_file, "w").write(log)
    if config.upload:
        print "> Uploading test results"
        url_base = config.server
        data = {
                "num": n,
                "result": report_status,
                "interpreter": config.interpreter,
                "testcommand": config.testcommand,
                "log": log,
                "master_hash": master_hash,
                "branch_hash": branch_hash,
                }
        report_url = reviews_sympy_org_upload(data, url_base)
        print "> Uploaded report at: %s" % report_url
        review = formulate_review(report_url, report_status,
                xpassed, master_hash, branch_hash, user, config)
    else:
        review = formulate_review("(report was not uploaded)",
                report_status, xpassed, master_hash, branch_hash, user, config)
    print "> Review:"
    print review
    if config.upload:
        print "> Uploading the review to the GitHub pull request ..."
        github_add_comment_to_pull_request(config.repository, n, review,
                username, password)
        print ">     Done."
        print format_repo("> Check the results: https://github.com/{repo}/pull/%d", config.repository) % n
    print "> Merged pull request available in: %s" % tmpdir

if __name__ == "__main__":
    main()
    sys.exit(0)
