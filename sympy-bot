#! /usr/bin/env python

import json
from urllib2 import urlopen
import sys
from optparse import OptionParser
from tempfile import mkdtemp
import subprocess
import os
from os.path import expandvars
import urllib2
import base64
from urllib import urlencode
from getpass import getpass
import time
from glob import glob

class CmdException(Exception):
    pass

class AuthenticationFailed(Exception):
    pass

def main():
    parser = OptionParser(usage="""\
[options] [commands]

Commands:

  review NNN            Reviews the pull request NNN
  list                  Lists all open pull requests
  list-numbers          Lists only the numbers of open pull requests;
                        Suitable for piping into 'xargs -L 1 sympy-bot review'""")
    parser.add_option("-n", "--no-upload",
            action="store_false", dest="upload",
            default=True, help="Do not upload the results into the pull request")
    parser.add_option("-r", "--reference",
            action="store", type="str", dest="reference",
            default=None, help="Passes this to 'git clone <sympy repo>'")
    options, args = parser.parse_args()

    if len(args) == 1:
        arg, = args
        if arg == "list":
            list_pull_requests()
            return
        elif arg == "list-numbers":
            list_pull_requests(numbers_only=True)
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) == 2:
        arg1, arg2 = args
        if arg1 == "review":
            review(int(arg2), upload=options.upload, reference=options.reference)
            return
        print "Unknown command"
        sys.exit(1)
    elif len(args) == 0:
        pass
    else:
        print "Too many arguments"
        sys.exit(1)
    parser.print_help()

def cmd(s, capture=False, ok_exit_code_list=None):
    """
    Executes the command "s".

    It raises an exception if the command fails to run.

    capture ... If True, it captures its output and returns it as a string.
    ok_exit_code_list ... a list of ok exit codes (otherwise cmd() raises an
    exception)
    """
    if ok_exit_code_list is None:
        ok_exit_code_list = [0]
    s = expandvars(s)
    if capture:
        p = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT)
        output = p.communicate()[0]
        r = p.returncode
    else:
        output = None
        r = os.system(s)
    if r not in ok_exit_code_list:
        raise CmdException("Command '%s' failed with err=%d." % (s, r))
    return output

def github_get_pull_request_all():
    """
    Returns all github pull requests.
    """
    return json.load(urlopen('http://github.com/api/v2/json/pulls/sympy/sympy'))

def github_get_pull_request(n):
    """
    Returns pull request 'n'.
    """
    url = 'http://github.com/api/v2/json/pulls/sympy/sympy/%d'
    data = json.load(urlopen(url % n))
    return data["pull"]

def github_check_authentication(username, password):
    """
    Checks that username & password is valid.
    """
    if username.endswith('/token'):
        user = username[:-6]
    else:
        user = username

    request = urllib2.Request("https://github.com/api/v2/json/user/show/%s" % user)
    base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
    request.add_header("Authorization", "Basic %s" % base64string)
    s = json.load(urllib2.urlopen(request))
    if not ("user" in s and "plan" in s["user"]):
        raise AuthenticationFailed("invalid username or password")

def github_add_comment_to_pull_request(n, comment, username, password):
    """
    Adds a 'comment' to the pull request 'n'.

    Currently it needs github username and password (as strings).
    """
    request = urllib2.Request("https://github.com/api/v2/json/issues/comment/sympy/sympy/%d" % n, data=urlencode([("comment", comment)]))
    base64string = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
    request.add_header("Authorization", "Basic %s" % base64string)
    s = json.load(urllib2.urlopen(request))
    assert s["comment"]["body"] == comment

def pastehtml_upload(source, input_type="html"):
    """
    Uploads 'source' as an 'input_type' type to pastehtml.com.

    source ....... source of the webpage/text
    input_type ... txt or html (default html)

    """
    url = "http://pastehtml.com/upload/create?input_type=%s&result=address"
    request = urllib2.Request(url % input_type, data=urlencode([("txt", source)]))

    while True:
        try:
            result = urllib2.urlopen(request)
            break
        except urllib2.HTTPError:
            print "Error while accessing pastehtml.com, retrying in 2s"
            time.sleep(2)

    s = result.read()
    # There is a bug at pastehtml.com, that sometimes it returns:
    # http://pastehtml.comhttp://pastehtml.com/view/1eddmnp.html
    # instead of:
    # http://pastehtml.com/view/1eddmnp.html
    # So we check if this is the case, and correct it:
    if s.find("http", 2) != -1:
        s = s[s.find("http", 2):]
    return s

def list_pull_requests(numbers_only=False):
    p = github_get_pull_request_all()
    pulls = []
    if numbers_only:
        for pull in p['pulls']:
            print pull['number']
        return
    for pull in p['pulls']:
        n = pull['number']
        repo = pull['head']['repository']['url']
        branch = pull['head']['ref']
        author = '"%s" <%s>' % (pull["user"].get("name", "unknown"),
                                pull["user"].get("email", ""))
        last_change = pull["updated_at"]
        last_change = time.strptime(last_change, "%Y-%m-%dT%H:%M:%SZ")
        last_change = time.mktime(last_change)
        pulls.append((last_change, n, repo, branch, author))
    pulls.sort(key=lambda x: x[0])
    for last_change, n, repo, branch, author in pulls:
        print "#%03d: %s %s" % (n, repo, branch)
        print "      Author: %s" % author
        print "      Date  : %s" % time.ctime(last_change)

def formulate_review(report_url, report, user):

    # Attempt to infer the status of the review from the report.
    # XXX: This should be refactored into the sympy-next script, but it's kind
    # of complicated and I'm kind of lazy.
    # Anyway, this is very hackish and dependent on the html output of sympy-next.
    user = user.get("login", None)
    if user:
        atuser = "@"+user+": "
    else:
        atuser = ""
    if "> conflicts </td>" in report:
        summary = """There were merge conflicts; could not test the branch.

%sPlease rebase or merge your branch with master.""" % atuser
    elif "> fetch </td>" in report:
        summary = """Could not fetch the branch.  Please run the sympy-bot tests again.""" % atuser
    elif "> FAIL </td>" in report:
        summary = """There were test failures.

%sPlease fix the test failures.""" % atuser
    else:
        summary = """There do not appear to be any problems.

Please double check this against the test report given above before merging with master."""

    s = """\
Test results html report: %s

Summary: %s

Automatic review by [sympy-bot](https://github.com/sympy/sympy-bot).""" % \
       (report_url, summary)

    return s

def load_config_file():
    conf_file = os.path.expanduser('~/.sympy/sympy-bot.conf')

    if os.path.exists(conf_file):
        namespace = {}

        with open(conf_file) as f:
            try:
                exec f.read() in namespace
            except (SystemExit, KeyboardInterrupt):
                raise
            except:
                pass
            else:
                print "> Using %s" % conf_file
                return namespace

    return {}

_login_message = """\
Enter your GitHub username & password or press ^C to quit. The password
will be kept as a Python variable as long as sympy-bot is running and
https to authenticate with GitHub, otherwise not saved anywhere else:\
"""

def github_authenticate(config):
    try:
        username = config['user'] + '/token'
        password = config['token']
    except KeyError:
        pass
    else:
        try:
            print "> Checking username and password ..."
            github_check_authentication(username, password)
        except AuthenticationFailed:
            print ">     Authentication failed."
        else:
            print ">     OK."
            return username, password

    print _login_message

    try:
        username = raw_input("Username: ")
        while True:
            password = getpass("Password: ")

            try:
                print "> Checking username and password ..."
                github_check_authentication(username, password)
            except AuthenticationFailed:
                print ">     Authentication failed."
            else:
                print ">     OK."
                return username, password
    except KeyboardInterrupt:
        print "\n> Quitting on signal SIGINT."
        sys.exit(1)

def review(n, upload=False, reference=None):
    config = load_config_file()
    if upload:
        username, password = github_authenticate(config)
    tmpdir = mkdtemp(prefix='sympy-bot-tmp')
    print "> Working directory: %s" % tmpdir
    pull = github_get_pull_request(n)
    assert pull['number'] == n
    print "> Reviewing pull request #%d" % n
    repo = pull['head']['repository']['url']
    branch = pull['head']['ref']
    user = pull["user"]
    author = '"%s" <%s>' % (pull["user"].get("name", "unknown"),
                            pull["user"].get("email", ""))
    print "> Pull request info:"
    print ">     Author: %s" % author
    print ">     Repository: %s" % repo
    print ">     Branch: %s" % branch

    open("%s/branches" % tmpdir, "w").write(
        "https://github.com/sympy/sympy.git master\n%s %s" % (repo, branch))
    print "> Cloning sympy/sympy master"

    if not reference:
        reference = config.get('reference')

    if reference:
        reference = os.path.abspath(os.path.expanduser(os.path.expandvars(reference)))
        cmd("cd %s; git clone --reference %s git://github.com/sympy/sympy.git " % (tmpdir, reference))
    else:
        cmd("cd %s; git clone git://github.com/sympy/sympy.git " % tmpdir)

    print "> Running sympy-next"
    cmd("cp other/sympy-next.py %s/" % tmpdir)
    cmd("cd %s; ./sympy-next.py -r sympy -b branches -o out -l log --verbose" % tmpdir)
    print "Done."
    print
    report_file = "%s/out/report.html" % tmpdir
    log_file = "%s/out/log" % tmpdir
    print "View report at: %s" % report_file
    print "View log at: %s" % log_file
    print "> Uploading test results"
    report = open(report_file).read()
    report_url = pastehtml_upload(report, input_type="html")
    print "> Uploaded report at: %s" % report_url
    review = formulate_review(report_url, report, user)
    print "> Review:"
    print review
    if upload:
        print "> Uploading the review to the GitHub pull request ..."
        github_add_comment_to_pull_request(n, review, username, password)
        print ">     Done."
        print "> Check the results: https://github.com/sympy/sympy/pull/%d" % n
    print "> Merged pull request available in: %s" % tmpdir

if __name__ == "__main__":
    main()
